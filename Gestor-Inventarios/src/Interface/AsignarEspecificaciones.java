package Interface;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author esauj
 */
public class AsignarEspecificaciones extends javax.swing.JFrame {

    /**
     * Creates new form AsignarEspecificaciones
     */
    public AsignarEspecificaciones() {
        initComponents();

        setLocationRelativeTo(null);
        llenarComboBox();

        tblAsigEspe.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[]{
                    "Id", "Producto", "Especificación", "Descripción"
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Todas las celdas no son editables
            }
        });

    }

    public void setProductoText(String text) {
        txtProducto.setText(text);
        llenarTablaEspecificaciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAsigEspe = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbEspecificacion = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblAsigEspe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Producto", "Especificación", "Descripción"
            }
        ));
        jScrollPane1.setViewportView(tblAsigEspe);

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/resources/imgs/mas.png"))); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/resources/imgs/borrar.png"))); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/resources/imgs/exit.png"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Producto :");

        cmbEspecificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbEspecificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEspecificacionActionPerformed(evt);
            }
        });

        jLabel2.setText("Especificación :");

        jLabel3.setText("Descripcion de la especificación :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSalir)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(61, 61, 61)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnAgregar)
                                .addComponent(btnEliminar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbEspecificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(52, 52, 52))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnSalir)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbEspecificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addGap(105, 105, 105))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
        Productos productos = new Productos();
        productos.setVisible(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            File archivo = new File("asignarEspecificaciones.txt");

            // Generar automáticamente el nuevo ID
            String id = gestor.inventarios.AsignarEspecificaciones.generarNuevoId(archivo);
            String producto = txtProducto.getText().trim();
            String descripcion = txtDescripcion.getText().trim();
            String especificacion = cmbEspecificacion.getSelectedItem().toString();

            // Verifica que no haya campos vacíos
            if (producto.isEmpty() || descripcion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Validar entrada de descripción antes de agregar el producto
            if (!validarEntradaDescripcion()) { // Modificado para devolver un booleano
                return; // Si la validación falla, detener el proceso
            }

            // Si la validación es correcta, continuar
            // Agregar el producto al archivo
            gestor.inventarios.AsignarEspecificaciones.agregarEspecificacion(id, producto, especificacion, descripcion);

            limpiarCampos();

            // Verificar si cmbSub tiene elementos antes de seleccionar
            if (cmbEspecificacion.getItemCount() > 0) {
                cmbEspecificacion.setSelectedIndex(0);
            } else {
                // Opcional: deshabilitar cmbSub si no hay subcategorías
                cmbEspecificacion.setSelectedIndex(-1); // No selección
                cmbEspecificacion.setEnabled(false);
                JOptionPane.showMessageDialog(this, "No hay subcategorías disponibles para la categoría seleccionada.", "Sin Subcategorías", JOptionPane.INFORMATION_MESSAGE);
            }

            // Actualizar la tabla con los productos
            JOptionPane.showMessageDialog(this, "Producto agregado correctamente.");
            llenarTablaEspecificaciones();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Precio y Stock deben ser números válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ocurrió un error al agregar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void cmbEspecificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEspecificacionActionPerformed
  
    }//GEN-LAST:event_cmbEspecificacionActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
             // Obtiene la fila seleccionada de la tabla
        int filaSeleccionada = tblAsigEspe.getSelectedRow();

        // Verifica si se ha seleccionado una fila
        if (filaSeleccionada != -1) {
            // Obtiene el ID del usuario en la columna 0 (primera columna de la tabla)
            String id = tblAsigEspe.getValueAt(filaSeleccionada, 0).toString();

            // Llama al método para eliminar el usuario del archivo
            gestor.inventarios.AsignarEspecificaciones.eliminarEspecificacion(id);

            // Actualiza la tabla después de eliminar el usuario
            llenarTablaEspecificaciones();
        } else {
            // Muestra un mensaje de error si no se seleccionó ninguna fila
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor seleccione una especificacion para eliminar.");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /// VALIDACION DE DATOS PARA EL CMB
    public String obtenerTipoDatoEspecificacion(String especificacionSeleccionada) {
        File archivoEspecificaciones = new File("especificaciones.txt");

        try (BufferedReader br = new BufferedReader(new FileReader(archivoEspecificaciones))) {
            String linea;

            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split("\\|");
                if (partes.length >= 4 && partes[1].trim().equalsIgnoreCase(especificacionSeleccionada)) {
                    return partes[3].trim(); // Devolvemos el tipo de dato (Texto, Número, Fecha)
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return null; // En caso de que no se encuentre la especificación
    }

    private boolean validarEntradaDescripcion() {
        // Verifica si hay un elemento seleccionado en el combo box
        if (cmbEspecificacion.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una especificación.", "Error", JOptionPane.WARNING_MESSAGE);
            return false; // Validación fallida
        }

        String especificacionSeleccionada = cmbEspecificacion.getSelectedItem().toString();
        String tipoDato = obtenerTipoDatoEspecificacion(especificacionSeleccionada);

        if (tipoDato != null) {
            String descripcion = txtDescripcion.getText().trim();

            switch (tipoDato.toLowerCase()) {
                case "texto":
                    // Permitir cualquier tipo de texto
                    return true;

                case "numero":
                    try {
                        double valor = Double.parseDouble(descripcion);
                        return true; // Si se puede convertir a número, todo está bien
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                        txtDescripcion.setText(""); // Limpiamos el campo
                        return false; // Validación fallida
                    }

                case "fecha":
                    // Validar que la fecha sea válida en formato dd/MM/yyyy
                    if (!descripcion.matches("\\d{2}/\\d{2}/\\d{4}")) {
                        JOptionPane.showMessageDialog(this, "Por favor, ingrese una fecha válida en formato dd/MM/yyyy.", "Error", JOptionPane.ERROR_MESSAGE);
                        txtDescripcion.setText(""); // Limpiamos el campo
                        return false; // Validación fallida
                    }
                    return true;

                default:
                    JOptionPane.showMessageDialog(this, "Tipo de dato no reconocido.", "Error", JOptionPane.ERROR_MESSAGE);
                    return false; // Validación fallida
            }
        }

        return false; // Si llegamos aquí, algo salió mal
    }

    private void limpiarCampos() {
        txtDescripcion.setText("");
        cmbEspecificacion.setSelectedIndex(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarEspecificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarEspecificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarEspecificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarEspecificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignarEspecificaciones().setVisible(true);
            }
        });
    }

    private void llenarComboBox() {
        File archivoRoles = new File("especificaciones.txt");

        try (BufferedReader br = new BufferedReader(new FileReader(archivoRoles))) {
            String linea;

            // Limpiamos el comboBox antes de llenarlo
            cmbEspecificacion.removeAllItems();

            // Leer cada línea del archivo
            while ((linea = br.readLine()) != null) {
                // Dividir la línea en los diferentes valores (id y descripción)
                String[] partes = linea.split("\\|");

                // Solo agregamos la descripción del rol al comboBox
                if (partes.length >= 2) {
                    cmbEspecificacion.addItem(partes[1]); // Agregamos el nombre de la especificación
                }
            }

            // Seleccionamos el primer elemento si hay alguno
            if (cmbEspecificacion.getItemCount() > 0) {
                cmbEspecificacion.setSelectedIndex(0); // Seleccionar el primer elemento
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void llenarTablaEspecificaciones() {
        DefaultTableModel model = (DefaultTableModel) tblAsigEspe.getModel();
        model.setRowCount(0);

        if (txtProducto == null) {
            System.out.println("Error: txtProducto es null");
            return;
        }

        String productoBuscado = txtProducto.getText();

        if (productoBuscado == null || productoBuscado.trim().isEmpty()) {
            System.out.println("Error: El texto está vacío o es null");
            return;
        }

        productoBuscado = productoBuscado.trim().toLowerCase();

        File archivoEspecificaciones = new File("asignarEspecificaciones.txt");

        try (BufferedReader br = new BufferedReader(new FileReader(archivoEspecificaciones))) {
            String linea;
            boolean encontrado = false;
            while ((linea = br.readLine()) != null) {

                String[] partes = linea.split("\\|");
                if (partes.length >= 4) {
                    String productoEnRegistro = partes[1].trim().toLowerCase();

                    if (productoEnRegistro.equals(productoBuscado)) {
                        model.addRow(new Object[]{partes[0], partes[1], partes[2], partes[3]});
                        encontrado = true;

                    }
                } else {
                    System.out.println("Línea no tiene suficientes partes: " + partes.length);
                }
            }
            if (!encontrado) {
                System.out.println("No se encontraron especificaciones para el producto: '" + productoBuscado + "'");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbEspecificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAsigEspe;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtProducto;
    // End of variables declaration//GEN-END:variables
}
